void DoBattle(void);
void WildFled_EnemyFled_LinkBattleCanceled(void);
void BattleTurn(void);
void Stubbed_Increments5_a89a(void);
void HandleBetweenTurnEffects(void);
bool CheckFaint_PlayerThenEnemy(void);
bool CheckFaint_EnemyThenPlayer(void);
void HandleBerserkGene(void);
bool EnemyTriesToFlee(void);
bool DetermineMoveOrder(void);
// bool CheckContestBattleOver(void);
// bool CheckPlayerLockedIn(void);
// bool ParsePlayerAction(void);
void HandleEncore(void);
// bool TryEnemyFlee(void);
// int CompareMovePriority(void);
// uint8_t GetMovePriority(move_t a);
uint8_t GetMoveEffect(move_t b);
void Battle_EnemyFirst(void);
void Battle_PlayerFirst(void);
void PlayerTurn_EndOpponentProtectEndureDestinyBond(void);
void EnemyTurn_EndOpponentProtectEndureDestinyBond(void);
void EndOpponentProtectEndureDestinyBond(void);
void EndUserDestinyBond(void);
// bool HasUserFainted(void);
// bool HasEnemyFainted(void);
// bool HasPlayerFainted(void);
void CheckIfHPIsZero(void);
bool ResidualDamage(void);
void HandlePerishSong(void);
void HandleWrap(void);
void SwitchTurnCore(void);
void HandleLeftovers(void);
void HandleMysteryberry(void);
void HandleFutureSight(void);
void HandleDefrost(void);
void HandleSafeguard(void);
void HandleScreens(void);
void HandleWeather(void);
// void SubtractHPFromTarget(uint16_t hp);
void SubtractHPFromUser(uint16_t hp);
// void SubtractHP(uint16_t bc);
uint16_t GetSixteenthMaxHP(void);
uint16_t GetEighthMaxHP(void);
uint16_t GetQuarterMaxHP(void);
uint16_t GetHalfMaxHP(void);
uint16_t GetMaxHP(void);
void GetHalfHP(void);
bool CheckUserHasEnoughHP(uint16_t bc);
void RestoreHP(uint16_t bc);
void UpdateHPBarBattleHuds(void);
void UpdateHPBar(void);
void HandleEnemyMonFaint(void);
void DoubleSwitch(void);
void UpdateBattleStateAndExperienceAfterEnemyFaint(void);
// uint8_t IsAnyMonHoldingExpShare(void);
// void StopDangerSound(void);
// void FaintYourPokemon(void);
// void FaintEnemyPokemon(void);
// bool CheckEnemyTrainerDefeated(void);
// uint8_t HandleEnemySwitch(void);
// uint8_t EnemyPartyMonEntrance(bool set);
// void WinTrainerBattle(void);
void AddBattleMoneyToAccount(uint8_t* de, const uint8_t* hl);
void PlayVictoryMusic(void);
bool IsKantoGymLeader(uint8_t a);
bool IsGymLeader(uint8_t a);
void IsGymLeaderCommon(void);
// void HandlePlayerMonFaint(void);
// void UpdateFaintedPlayerMon(void);
// bool AskUseNextPokemon(void);
// uint8_t ForcePlayerMonChoice(void);
// void PlayerPartyMonEntrance(void);
bool CheckMobileBattleError(void);
// bool IsMobileBattle(void);
void SetUpBattlePartyMenu(void);
void SetUpBattlePartyMenu_Loop(void);
void JumpToPartyMenuAndPrintText(void);
u8_flag_s SelectBattleMon(void);
bool PickPartyMonInBattle(void);
bool SwitchMonAlreadyOut(void);
bool ForcePickPartyMonInBattle(void);
bool PickSwitchMonInBattle(void);
bool ForcePickSwitchMonInBattle(void);
// void LostBattle(void);
// void EnemyMonFaintedAnimation(void);
// void PlayerMonFaintedAnimation(void);
// void MonFaintedAnimation(tile_t* de, tile_t* hl);
// void SlideBattlePicOut(uint8_t* hl, uint8_t a);
void ForceEnemySwitch(void);
void EnemySwitch(void);
void EnemySwitch_SetMode(void);
// u8_flag_s CheckWhetherSwitchmonIsPredetermined(void);
void ResetEnemyBattleVars(void);
void ResetBattleParticipants(void);
void AddBattleParticipant(void);
uint8_t FindMonInOTPartyToSwitchIntoBattle(void);
void LookUpTheEffectivenessOfEveryMove(uint8_t b);
void IsThePlayerMonTypesEffectiveAgainstOTMon(uint8_t b);
uint8_t ScoreMonTypeMatchups(void);
void LoadEnemyMonToSwitchTo(uint8_t b);
// bool CheckWhetherToAskSwitch(void);
// bool OfferSwitch(void);
// void ClearEnemyMonBox(void);
void ShowBattleTextEnemySentOut(void);
void ShowSetEnemyMonAndSendOutAnimation(void);
void NewEnemyMonStatus(void);
void ResetEnemyStatLevels(void);
bool CheckPlayerPartyForFitMon(void);
// bool CheckIfCurPartyMonIsFitToFight(void);
// bool TryToRunAwayFromBattle(const struct BattleMon* hl, const struct BattleMon* de);
void InitBattleMon(void);
bool BattleCheckPlayerShininess(void);
bool BattleCheckEnemyShininess(void);
bool BattleCheckShininess(uint16_t dvs);
uint16_t GetPartyMonDVs(void);
uint16_t GetEnemyMonDVs(void);
void ResetPlayerStatLevels(void);
void InitEnemyMon(void);
void SwitchPlayerMon(void);
void SendOutPlayerMon(void);
void NewBattleMonStatus(void);
void BreakAttraction(void);
void SpikesDamage(void);
bool PursuitSwitch(void);
void RecallPlayerMon(void);
void HandleHealingItems(void);
void HandleHPHealingItem(void);
void UseOpponentItem(void);
void ItemRecoveryAnim(void);
bool UseHeldStatusHealingItem(void);
void UseConfusionHealingItem(void);
void HandleStatBoostingHeldItems(void);
// void GetPartymonItem(item_t** hl, item_t** bc);
// void GetOTPartymonItem(item_t** hl, item_t** bc);
void UpdateBattleHUDs(void);
void UpdatePlayerHUD(void);
uint8_t DrawPlayerHUD(void);
// void UpdatePlayerHPPal(uint8_t e);
void CheckDanger(void);
void PrintPlayerHUD(void);
void UpdateEnemyHUD(void);
uint8_t DrawEnemyHUD(void);
// void UpdateEnemyHPPal(uint8_t e);
// void UpdateHPPal(uint8_t* hl, uint8_t e);
void Battle_DummyFunction(void);
bool BattleMenu(void);
void BattleMenu_Fight(void);
bool LoadBattleMenu2(void);
void BattleMenu_Pack(void);
void BattleMenu_PKMN(void);
void BattleMenuPKMN_ReturnFromStats(void);
void BattleMenuPKMN_Loop(void);
void Battle_StatsScreen(void);
void TryPlayerSwitch(void);
bool PlayerSwitch(void);
void EnemyMonEntrance(void);
void BattleMonEntrance(void);
void PassedBattleMonEntrance(void);
void BattleMenu_Run(void);
// void CheckAmuletCoin(void);
bool MoveSelectionScreen(void);
void MoveInfoBox(void);
bool CheckPlayerHasUsableMoves(void);
void ParseEnemyAction(void);
void ResetVarsForSubstatusRage(void);
bool CheckEnemyLockedIn(void);
void LinkBattleSendReceiveAction(void);
void LoadEnemyMon(void);
// bool CheckSleepingTreeMon(species_t species);
// bool CheckUnownLetter(unown_letter_t a);
void SwapBattlerLevels(void);
void BattleWinSlideInEnemyTrainerFrontpic(void);
void ApplyStatusEffectOnPlayerStats(void);
void ApplyStatusEffectOnEnemyStats(void);
// void ApplyStatusEffectOnStats(uint8_t turn);
void ApplyPrzEffectOnSpeed(uint8_t turn);
void ApplyBrnEffectOnAttack(uint8_t turn);
void ApplyStatLevelMultiplierOnAllStats(void);
// void ApplyStatLevelMultiplier(uint8_t c);
void BadgeStatBoosts(void);
// uint8_t BoostStat(uint8_t* hl);
void v_LoadBattleFontsHPBar(void);
// void v_LoadHPBar(void);
void LoadHPExpBarGFX(void);
void EmptyBattleTextbox(void);
uint8_t v_BattleRandom(void);
// void Call_PlayBattleAnim_OnlyIfVisible(uint16_t de);
// void Call_PlayBattleAnim(uint16_t de);
void FinishBattleAnim(void);
void GiveExperiencePoints(void);
// uint16_t BoostExp(uint16_t exp);
extern const txt_cmd_s Text_MonGainedExpPoint[];
extern const txt_cmd_s BoostedExpPointsText[];
extern const txt_cmd_s ExpPointsText[];
void AnimateExpBar(uint16_t exp);
void SendOutMonText(void);
extern const txt_cmd_s GoMonText[];
extern const txt_cmd_s DoItMonText[];
extern const txt_cmd_s GoForItMonText[];
extern const txt_cmd_s YourFoesWeakGetmMonText[];
// void PrepareBattleMonNicknameText(struct TextCmdState* state);
extern const txt_cmd_s BattleMonNicknameText[];
void WithdrawMonText(void);
extern const txt_cmd_s ThatsEnoughComeBackText[];
extern const txt_cmd_s OKComeBackText[];
extern const txt_cmd_s GoodComeBackText[];
void TextJump_ComeBack(void);
extern const txt_cmd_s ComeBackText[];
void HandleSafariAngerEatingStatus(void);
void FillInExpBar(uint8_t* hl, uint8_t b, const uint8_t* de);
// uint8_t CalcExpBar(uint8_t b, const uint8_t* de);
// void PlaceExpBar(uint8_t* hl, uint8_t b);
void GetBattleMonBackpic(void);
void DropPlayerSub(void);
// void GetBattleMonBackpic_DoAnim(void (*hl)(void));
void GetEnemyMonFrontpic(void);
void DropEnemySub(void);
// void GetEnemyMonFrontpic_DoAnim(void (*hl)(void));
bool StartBattle(void);
void CallDoBattle(void);
void BattleIntro(void);
void LoadTrainerOrWildMonPic(void);
void InitEnemy(void);
void BackUpBGMap2(void);
// void InitEnemyTrainer(uint8_t tclass);
// void InitEnemyWildmon(void);
void FillEnemyMovesFromMoveIndicesBuffer(void);
void ExitBattle(void);
void CleanUpBattleRAM(void);
// void CheckPayDay(void);
void ShowLinkBattleParticipantsAfterEnd(void);
void DisplayLinkBattleResult(void);
// bool IsMobileBattle2(void);
void v_DisplayLinkRecord(void);
void ReadAndPrintLinkBattleRecord(void);
// void BattleEnd_HandleRoamMons(void);
// uint8_t* GetRoamMonMapGroup(species_t a);
// uint8_t* GetRoamMonMapNumber(species_t a);
// uint8_t* GetRoamMonHP(species_t a);
// uint16_t* GetRoamMonDVs(species_t a);
// species_t* GetRoamMonSpecies(species_t a);
void AddLastLinkBattleToLinkRecord(void);
// void InitBattleDisplay(void);
void GetTrainerBackpic(void);
// void CopyBackpic(void);
// void BattleStartMessage(void);
//#include "data/wild/flee_mons.h"
//#include "data/moves/effects_priorities.h"
//#include "data/trainers/leaders.h"
//#include "data/battle/held_heal_status.h"
//#include "data/battle/held_stat_up.h"
//#include "data/wild/treemons_asleep.h"
//#include "data/wild/unlocked_unowns.h"
//#include "data/battle/stat_multipliers_2.h"
