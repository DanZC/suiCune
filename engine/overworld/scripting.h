void EnableScriptMode(void);
void ScriptEvents(void);
void EndScript(void);
void WaitScript(void);
void WaitScriptMovement(void);
void RunScriptCommand(void);
void ScriptCommandTable(void);
// void StartScript(void);
// bool CheckScript(void);
// void StopScript(void);
void Script_callasm(void);
void Script_special(script_s* s, uint16_t de);
void Script_memcallasm(void);
void Script_jumptextfaceplayer(script_s* s, const struct TextCmd* text);
void Script_jumptext(script_s* s, const struct TextCmd* text);
bool JumpTextFacePlayerScript(script_s* s);
bool JumpTextScript(script_s* s);
void Script_farjumptext(void);
void Script_writetext(script_s* s, const struct TextCmd* text);
void Script_farwritetext(void);
void Script_repeattext(script_s* s, uint16_t hl);
void Script_waitbutton(script_s* s);
void Script_promptbutton(script_s* s);
void Script_yesorno(script_s* s);
void Script_loadmenu(script_s* s, const struct MenuHeader* header);
void Script_closewindow(script_s* s);
void Script_pokepic(script_s* s, species_t species);
void Script_closepokepic(script_s* s);
void Script_verticalmenu(script_s* s);
void Script__2dmenu(script_s* s);
void Script_battletowertext(script_s* s, uint8_t text);
void Script_verbosegiveitem(script_s* s, item_t item, uint8_t quantity);
void GiveItemScript_DummyFunction(void);
bool GiveItemScript(script_s* s);
void Script_verbosegiveitemvar(script_s* s, item_t item, uint8_t action);
void Script_itemnotify(script_s* s);
void Script_pocketisfull(script_s* s);
void Script_specialsound(script_s* s);
uint8_t* GetPocketName(void);
uint8_t* CurItemName(item_t item);
extern const txt_cmd_s PutItemInPocketText[];
extern const txt_cmd_s PocketIsFullText[];
void Script_pokemart(script_s* s, uint8_t mart_type, uint16_t mart_id);
void Script_elevator(script_s* s, const struct ElevatorData* data);
void Script_trade(script_s* s, uint8_t trade);
void Script_phonecall(void);
void Script_hangup(script_s* s);
void Script_askforphonenumber(script_s* s, uint8_t contact);
void Script_describedecoration(script_s* s, uint8_t deco);
void Script_fruittree(script_s* s, uint8_t tree);
void Script_swarm(script_s* s, uint8_t flag, uint8_t group, uint8_t number);
void Script_trainertext(script_s* s, uint8_t a);
void Script_scripttalkafter(script_s* s);
void Script_trainerflagaction(script_s* s, uint8_t action);
void Script_winlosstext(script_s* s, const struct TextCmd* wintext, const struct TextCmd* losstext);
void Script_endifjustbattled(script_s* s);
void Script_checkjustbattled(script_s* s);
void Script_encountermusic(script_s* s);
void Script_playmapmusic(script_s* s);
void Script_playmusic(script_s* s, uint16_t music);
void Script_musicfadeout(script_s* s, uint16_t id, uint8_t fade);
void Script_playsound(script_s* s, uint16_t sfx);
void Script_waitsfx(script_s* s);
void Script_warpsound(script_s* s);
void Script_cry(script_s* s, species_t id);
// uint8_t GetScriptObject(uint8_t a);
void Script_setlasttalked(script_s* s, uint8_t a);
void Script_applymovement(script_s* s, uint8_t a, const uint8_t* hl);
// void ApplyMovement(uint8_t c, const uint8_t* hl);
void UnfreezeFollowerObject(uint8_t c);
void Script_applymovementlasttalked(script_s* s, const uint8_t* hl);
void Script_faceplayer(script_s* s);
void Script_faceobject(script_s* s, uint8_t e, uint8_t d);
void Script_turnobject(script_s* s, uint8_t obj, uint8_t dir);
// bool ApplyObjectFacing(uint8_t d, uint8_t e);
void Script_variablesprite(script_s* s, uint8_t slot, uint8_t val);
void Script_appear(script_s* s, uint8_t a);
void Script_disappear(script_s* s, uint8_t a);
// bool ApplyEventActionAppearDisappear(uint8_t mapObjIdx, uint8_t b);
void Script_follow(script_s* s, uint8_t leader, uint8_t follower);
void Script_stopfollow(script_s* s);
void Script_moveobject(script_s* s, uint8_t obj, uint8_t x, uint8_t y);
void Script_writeobjectxy(script_s* s, uint8_t obj);
void Script_follownotexact(script_s* s, uint8_t b, uint8_t c);
void Script_loademote(script_s* s, uint8_t emote);
void Script_showemote(script_s* s, uint8_t emote, uint8_t obj, uint8_t frames);
bool ShowEmoteScript(script_s* s);
void Script_earthquake(script_s* s, uint8_t amt);
extern const uint8_t EarthquakeMovement[5];
void Script_loadpikachudata(void);
void Script_randomwildmon(script_s* s);
void Script_loadtemptrainer(script_s* s);
void Script_loadwildmon(script_s* s, species_t sp, uint8_t level);
void Script_loadtrainer(script_s* s, uint8_t tclass, uint8_t tid);
void Script_startbattle(script_s* s);
void Script_catchtutorial(script_s* s, uint8_t type);
void Script_reloadmapafterbattle(script_s* s);
void Script_reloadmap(script_s* s);
void Script_scall(void);
void Script_farscall(void);
void Script_memcall(void);
void ScriptCall(void);
void CallCallback(Script_fn_t callback);
void Script_sjump(void);
void Script_farsjump(void);
void Script_memjump(void);
void Script_iffalse(void);
void Script_iftrue(void);
void Script_ifequal(void);
void Script_ifnotequal(void);
void Script_ifgreater(void);
void Script_ifless(void);
void Script_jumpstd(script_s* s, uint16_t std);
void Script_callstd(script_s* s, uint16_t std);
// Script_fn_t StdScript(uint16_t std);
void SkipTwoScriptBytes(void);
void ScriptJump(void);
void Script_sdefer(script_s* s, Script_fn_t script);
void Script_checkscene(script_s* s);
void Script_checkmapscene(script_s* s, uint8_t group, uint8_t map);
void Script_setscene(script_s* s, uint8_t scene);
void Script_setmapscene(script_s* s, uint8_t group, uint8_t map, uint8_t scene);
// void DoScene(uint8_t group, uint8_t map, uint8_t scene);
void Script_readmem(script_s* s, uint8_t* hl);
void Script_writemem(script_s* s, uint8_t* hl);
void Script_loadmem(script_s* s, uint8_t* hl, uint8_t val);
void Script_setval(script_s* s, uint8_t val);
void Script_addval(script_s* s, uint8_t val);
void Script_random(script_s* s, uint8_t a);
void Script_readvar(script_s* s, uint8_t var);
void Script_writevar(script_s* s, uint8_t var);
void Script_loadvar(script_s* s, uint8_t var, uint8_t value);
// uint8_t* GetVarAction(uint8_t a);
void Script_checkver(void);
void Script_getmonname(script_s* s, uint8_t buf, species_t species);
// void GetStringBuffer(uint8_t a, const uint8_t* de);
// void CopyConvertedText(uint8_t a, const uint8_t* de);
void Script_getitemname(script_s* s, item_t item, uint8_t buf);
void Script_getcurlandmarkname(script_s* s, uint8_t b);
// void ConvertLandmarkToText(uint8_t a, uint8_t b);
void Script_getlandmarkname(script_s* s, uint8_t a, uint8_t b);
void Script_gettrainername(script_s* s, uint8_t a, uint8_t b, uint8_t c);
void Script_getname(void);
void ContinueToGetName(void);
void Script_gettrainerclassname(script_s* s, uint8_t buffer, uint8_t tclass);
void Script_getmoney(script_s* s, uint8_t buffer, uint8_t which);
void Script_getcoins(script_s* s, uint8_t a);
void Script_getnum(script_s* s, uint8_t a);
// void ResetStringBuffer1(void);
void Script_getstring(script_s* s, uint8_t a, const char* hl);
void Script_givepokemail(script_s* s, const struct Pokemail* mail);
void Script_checkpokemail(script_s* s, const char* text);
void Script_giveitem(script_s* s, item_t item, uint8_t quantity);
void Script_takeitem(script_s* s, item_t item, uint8_t quantity);
void Script_checkitem(script_s* s, item_t item);
void Script_givemoney(script_s* s, uint8_t account, uint32_t amount);
void Script_takemoney(script_s* s, uint8_t account, uint32_t amount);
void Script_checkmoney(script_s* s, uint8_t account, uint32_t amt);
// void CompareMoneyAction(script_s* s, u8_flag_s res);
// uint8_t* GetMoneyAccount(uint8_t a);
// uint8_t* LoadMoneyAmountToMem(uint32_t amount);
void Script_givecoins(script_s* s, uint16_t amount);
void Script_takecoins(script_s* s, uint16_t amount);
void Script_checkcoins(script_s* s, uint16_t amount);
// uint8_t* LoadCoinAmountToMem(uint16_t amount);
void Script_checktime(script_s* s, uint8_t time);
void Script_checkpoke(script_s* s, species_t a);
void Script_addcellnum(script_s* s, uint8_t contact);
void Script_delcellnum(script_s* s, uint8_t c);
void Script_checkcellnum(script_s* s, uint8_t c);
void Script_specialphonecall(script_s* s, uint16_t id);
void Script_checkphonecall(script_s* s);
void Script_givepoke(script_s* s, species_t species, uint8_t lvl, item_t item, bool ext, const char* nickname, const char* otName);
void Script_givepokesimple(script_s* s, species_t species, uint8_t lvl, item_t item);
void Script_giveegg(script_s* s, species_t species, uint8_t lvl);
void Script_setevent(script_s* s, uint16_t flag);
void Script_clearevent(script_s* s, uint16_t flag);
void Script_checkevent(script_s* s, uint16_t flag);
void Script_setflag(script_s* s, uint16_t flag);
void Script_clearflag(script_s* s, uint16_t flag);
void Script_checkflag(script_s* s, uint16_t flag);
// bool v_EngineFlagAction(uint16_t de, uint8_t b);
void Script_wildoff(void);
void Script_wildon(void);
void Script_xycompare(void);
void Script_warpfacing(script_s* s, uint8_t dir, uint8_t group, uint8_t num, uint8_t x, uint8_t y);
void Script_warp(script_s* s, uint8_t group, uint8_t num, uint8_t x, uint8_t y);
void Script_warpmod(script_s* s, uint8_t warp, uint8_t group, uint8_t num);
void Script_blackoutmod(script_s* s, uint8_t group, uint8_t num);
void Script_dontrestartmapmusic(script_s* s);
void Script_writecmdqueue(script_s* s, const struct CmdQueue* cmd);
void Script_delcmdqueue(script_s* s, uint8_t b);
void Script_changemapblocks(void);
void Script_changeblock(script_s* s, uint8_t x, uint8_t y, uint8_t b);
void Script_reloadmappart(script_s* s);
void Script_warpcheck(script_s* s);
void Script_enableevents(void);
void Script_newloadmap(script_s* s, uint8_t method);
void Script_reloadend(script_s* s, uint8_t method);
void Script_opentext(script_s* s);
void Script_refreshscreen(script_s* s);
void Script_writeunusedbyte(script_s* s, uint8_t byte);
void UnusedClosetextScript(void);
void Script_closetext(script_s* s);
void Script_autoinput(script_s* s, const uint8_t* autoinput);
void Script_pause(script_s* s, uint8_t a);
void Script_deactivatefacing(script_s* s, uint8_t delay);
void Script_stopandsjump(script_s* s, Script_fn_t script);
void Script_end(script_s* s);
void Script_endcallback(script_s* s);
// bool ExitScriptSubroutine(script_s* s);
void Script_endall(script_s* s);
void Script_halloffame(script_s* s);
void Script_credits(script_s* s);
void ReturnFromCredits(script_s* s);
void Script_wait(script_s* s, uint8_t a);
void Script_checksave(script_s* s);
void Script_checkver_duplicate(void);
//#include "data/items/pocket_names.h"

extern Script_fn_t gDeferredScriptAddr;
