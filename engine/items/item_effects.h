void v_DoItemEffect(item_t item);
void ItemEffects(void);
void PokeBallEffect(void);
// void BallMultiplierFunctionTable(void);
uint8_t UltraBallMultiplier(uint8_t b);
uint8_t SafariBallMultiplier(uint8_t b);
uint8_t GreatBallMultiplier(uint8_t b);
uint8_t ParkBallMultiplier(uint8_t b);
void GetPokedexEntryBank(void);
uint8_t HeavyBallMultiplier(uint8_t b);
uint8_t LureBallMultiplier(uint8_t b);
uint8_t MoonBallMultiplier(uint8_t b);
uint8_t LoveBallMultiplier(uint8_t b);
uint8_t FastBallMultiplier(uint8_t b);
uint8_t LevelBallMultiplier(uint8_t b);
void BallDodgedText(void);
void BallMissedText(void);
extern const txt_cmd_s BallBrokeFreeText[];
extern const txt_cmd_s BallAppearedCaughtText[];
extern const txt_cmd_s BallAlmostHadItText[];
extern const txt_cmd_s BallSoCloseText[];
extern const txt_cmd_s Text_GotchaMonWasCaught[];
extern const txt_cmd_s WaitButtonText[];
extern const txt_cmd_s BallSentToPCText[];
extern const txt_cmd_s NewDexDataText[];
extern const txt_cmd_s AskGiveNicknameText[];
void ReturnToBattle_UseBall(void);
void TownMapEffect(void);
void BicycleEffect(void);
void EvoStoneEffect(void);
void VitaminEffect(void);
void NoEffectMessage(void);
void UpdateStatsAfterItem(struct PartyMon* hl);
void RareCandy_StatBooster_ExitMenu(void);
extern const txt_cmd_s ItemStatRoseText[];
extern const char* StatStrings[];
uint8_t GetStatExpRelativePointer(void);
// void StatExpItemPointerOffsets(void);
void RareCandy_StatBooster_GetParameters(void);
void RareCandyEffect(void);
void HealPowderEffect(void);
void StatusHealingEffect(void);
void FullyHealStatus(void);
uint8_t UseStatusHealer(void);
bool IsItemUsedOnConfusedMon(uint8_t c);
void BattlemonRestoreHealth(uint16_t hp);
void HealStatus(uint8_t c);
uint16_t GetItemHealingAction(item_t item);
void StatusHealer_Jumptable(uint8_t a);
void RevivalHerbEffect(void);
void ReviveEffect(void);
uint8_t RevivePokemon(void);
void FullRestoreEffect(void);
void BitterBerryEffect(void);
void RestoreHPEffect(void);
void EnergypowderEffect(void);
void EnergyRootEffect(void);
void EnergypowderEnergyRootCommon(uint8_t c);
uint8_t ItemRestoreHP(void);
void HealHP_SFX_GFX(void);
bool UseItem_SelectMon(uint8_t b);
u8_flag_s ChooseMonToUseItemOn(void);
void ItemActionText(uint8_t text);
void ItemActionTextWaitButton(void);
void StatusHealer_NoEffect(void);
void StatusHealer_ExitMenu(void);
void StatusHealer_ClearPalettes(void);
bool IsItemUsedOnBattleMon(void);
uint16_t ReviveHalfHP(struct PartyMon* bc);
uint16_t ReviveFullHP(struct PartyMon* bc);
uint16_t ContinueRevive(struct PartyMon* bc, uint16_t hp);
uint16_t RestoreHealth(struct PartyMon* bc, uint16_t amount);
void RemoveHP(struct PartyMon* bc, uint16_t amount);
bool IsMonFainted(struct PartyMon* bc);
bool IsMonAtFullHealth(struct PartyMon* bc);
void LoadCurHPIntoBuffer3(void);
void LoadHPIntoBuffer3(void);
void LoadHPFromBuffer3(void);
void LoadCurHPIntoBuffer2(void);
void LoadHPFromBuffer2(void);
void LoadMaxHPIntoBuffer1(void);
void LoadHPFromBuffer1(void);
uint16_t GetOneFifthMaxHP(struct PartyMon* bc);
uint16_t GetHealingItemAmount(item_t item);
void Softboiled_MilkDrinkFunction(void);
void EscapeRopeEffect(void);
void SuperRepelEffect(void);
void MaxRepelEffect(void);
void RepelEffect(void);
void UseRepel(uint8_t b);
extern const txt_cmd_s RepelUsedEarlierIsStillInEffectText[];
void XAccuracyEffect(void);
void PokeDollEffect(void);
void GuardSpecEffect(void);
void DireHitEffect(void);
void XItemEffect(void);
void PokeFluteEffect(void);
void BlueCardEffect(void);
void CoinCaseEffect(void);
void OldRodEffect(void);
void GoodRodEffect(void);
void SuperRodEffect(void);
void UseRod(uint8_t rod);
void ItemfinderEffect(void);
void RestorePPEffect(void);
void FinishPPRestore(void);
void BattleRestorePP(void);
void Not_PP_Up(struct PartyMon* mon, uint8_t n, item_t item);
void Elixer_RestorePPofAllMoves(void);
void PPRestoreItem_NoEffect(void);
void PPRestoreItem_Cancel(void);
bool RestorePP(struct PartyMon* mon, uint8_t n, item_t item);
extern const txt_cmd_s RaiseThePPOfWhichMoveText[];
extern const txt_cmd_s RestoreThePPOfWhichMoveText[];
extern const txt_cmd_s PPIsMaxedOutText[];
extern const txt_cmd_s PPsIncreasedText[];
extern const txt_cmd_s PPRestoredText[];
void SquirtbottleEffect(void);
void CardKeyEffect(void);
void BasementKeyEffect(void);
void SacredAshEffect(void);
void NormalBoxEffect(void);
void GorgeousBoxEffect(void);
void OpenBox(void);
void NoEffect(void);
void Play_SFX_FULL_HEAL(void);
void UseItemText(void);
void UseDisposableItem(void);
void UseBallInTrainerBattle(void);
void WontHaveAnyEffect_NotUsedMessage(void);
void LooksBitterMessage(void);
void Ball_BoxIsFullMessage(void);
void CantUseOnEggMessage(void);
void IsntTheTimeMessage(void);
void WontHaveAnyEffectMessage(void);
void BelongsToSomeoneElseMessage(void);
void CyclingIsntAllowedMessage(void);
void CantGetOnYourBikeMessage(void);
void CantUseItemMessage(const txt_cmd_s* hl);
extern const txt_cmd_s ItemLooksBitterText[];
extern const txt_cmd_s ItemCantUseOnEggText[];
extern const txt_cmd_s ItemOakWarningText[];
extern const txt_cmd_s ItemBelongsToSomeoneElseText[];
extern const txt_cmd_s ItemWontHaveEffectText[];
extern const txt_cmd_s BallBlockedText[];
extern const txt_cmd_s BallDontBeAThiefText[];
extern const txt_cmd_s NoCyclingText[];
extern const txt_cmd_s ItemCantGetOnText[];
extern const txt_cmd_s BallBoxFullText[];
extern const txt_cmd_s ItemUsedText[];
void ItemGotOnText(void);
void ItemGotOffText(void);
void ApplyPPUp(void);
uint8_t ComputeMaxPP(uint8_t pp, uint8_t base);
void RestoreAllPP(struct PartyMon* pmon);
uint8_t GetMaxPPOfMove(void* mon, uint8_t montype, uint8_t n);
void GetMthMoveOfNthPartymon(void);
void GetMthMoveOfCurrentMon(void);
//#include "data/items/heal_status.h"
//#include "data/items/heal_hp.h"
//#include "data/items/x_stats.h"
