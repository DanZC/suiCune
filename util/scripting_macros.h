#pragma once
#define SCRIPT_MAX_FARLABELS        128

#define SCRIPT_BEGIN                switch(s->position) { case 0:
#define SCRIPT_RET                  s->position = SCRIPT_MAX_FARLABELS + __LINE__ ; Script_end(s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_END                  (void)0; fallthrough; default: break; } return true;
#define SCRIPT_CALL(_s)             s->position = SCRIPT_MAX_FARLABELS + __LINE__; Script_CallScript(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_CALLGOTO(_s, _p)     s->position = SCRIPT_MAX_FARLABELS + __LINE__; Script_CallScriptPos(s, _s, _p); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_CALLLOCAL(_s)        s->position = SCRIPT_MAX_FARLABELS + __LINE__; Script_Push(s); goto _s; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_GOTOPOS(_s, _p)      Script_GotoPos(s, _s, _p); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_END2                 s->position = SCRIPT_MAX_FARLABELS + __LINE__; Script_end(s); return true; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_ENDCALLBACK          s->position = SCRIPT_MAX_FARLABELS + __LINE__; Script_endcallback(s); return true; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_EVCMD(_cmd, ...)     s->position = SCRIPT_MAX_FARLABELS + __LINE__; _cmd(s, ##__VA_ARGS__); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_IFTRUE(_s)           s->position = SCRIPT_MAX_FARLABELS + __LINE__; if(wram->wScriptVar) Script_Goto(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_IFFALSE(_s)          s->position = SCRIPT_MAX_FARLABELS + __LINE__; if(!wram->wScriptVar) Script_Goto(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_IFEQUAL(_v,_s)       s->position = SCRIPT_MAX_FARLABELS + __LINE__; if(wram->wScriptVar == (_v)) Script_Goto(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_IFNEQUAL(_v,_s)      s->position = SCRIPT_MAX_FARLABELS + __LINE__; if(wram->wScriptVar != (_v)) Script_Goto(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_IFLESS(_v,_s)        s->position = SCRIPT_MAX_FARLABELS + __LINE__; if(wram->wScriptVar <  (_v)) Script_Goto(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_IFGREATER(_v,_s)     s->position = SCRIPT_MAX_FARLABELS + __LINE__; if(wram->wScriptVar >  (_v)) Script_Goto(s, _s); return false; case SCRIPT_MAX_FARLABELS + __LINE__:
#define SCRIPT_FALLTHROUGH(_s)      (void)0; fallthrough; default: Script_Goto(s, _s); return false; } return true;

#define special(_s)                 SCRIPT_EVCMD(Script_special, SP_##_s)
#define jumptextfaceplayer(_t)      SCRIPT_EVCMD(Script_jumptextfaceplayer, _t)
#define jumptext(_t)                SCRIPT_EVCMD(Script_jumptext, _t)
#define writetext(_t)               SCRIPT_EVCMD(Script_writetext, _t)
#define repeattext(_hl)             SCRIPT_EVCMD(Script_repeattext, _hl)
#define waitbutton                  SCRIPT_EVCMD(Script_waitbutton)
#define promptbutton                SCRIPT_EVCMD(Script_promptbutton)
#define yesorno                     SCRIPT_EVCMD(Script_yesorno)
#define loadmenu(_hdr)              SCRIPT_EVCMD(Script_loadmenu, _hdr)
#define closewindow                 SCRIPT_EVCMD(Script_closewindow)
#define pokepic(_p)                 SCRIPT_EVCMD(Script_pokepic, _p)
#define closepokepic                SCRIPT_EVCMD(Script_closepokepic)
#define verticalmenu                SCRIPT_EVCMD(Script_verticalmenu)
#define _2dmenu                     SCRIPT_EVCMD(Script__2dmenu)
#define battletowertext(_t)         SCRIPT_EVCMD(Script_battletowertext, _t)
#define verbosegiveitem(_i, _q)     SCRIPT_EVCMD(Script_verbosegiveitem, _i, _q)
#define verbosegiveitemvar(_i,_v)   SCRIPT_EVCMD(Script_verbosegiveitemvar, _i, _v)
#define itemnotify                  SCRIPT_EVCMD(Script_itemnotify)
#define pocketisfull                SCRIPT_EVCMD(Script_pocketisfull)
#define specialsound                SCRIPT_EVCMD(Script_specialsound)
#define pokemart(_mty, _mid)        SCRIPT_EVCMD(Script_pokemart, _mty, _mid)
#define elevator(_data)             SCRIPT_EVCMD(Script_elevator, _data)
#define trade(_tid)                 SCRIPT_EVCMD(Script_trade, _tid)
#define hangup                      SCRIPT_EVCMD(Script_hangup)
#define askforphonenumber(_c)       SCRIPT_EVCMD(Script_askforphonenumber, _c)
#define describedecoration(_d)      SCRIPT_EVCMD(Script_describedecoration, _d)
#define fruittree(_tree)            SCRIPT_EVCMD(Script_fruittree, _tree)
#define swarm(_flag, _map)          SCRIPT_EVCMD(Script_swarm, _flag, MAP_ID(_map))
#define trainertext(_text)          SCRIPT_EVCMD(Script_trainertext, _text)
#define scripttalkafter             SCRIPT_EVCMD(Script_scripttalkafter)
#define trainerflagaction(_a)       SCRIPT_EVCMD(Script_trainerflagaction, _a)
#define winlosstext(_w, _l)         SCRIPT_EVCMD(Script_winlosstext, _w, _l)
#define endifjustbattled            SCRIPT_EVCMD(Script_endifjustbattled)
#define checkjustbattled            SCRIPT_EVCMD(Script_checkjustbattled)
#define encountermusic              SCRIPT_EVCMD(Script_encountermusic)
#define playmapmusic                SCRIPT_EVCMD(Script_playmapmusic)
#define playmusic(_music)           SCRIPT_EVCMD(Script_playmusic, _music)
#define musicfadeout(_id, _fade)    SCRIPT_EVCMD(Script_musicfadeout, _id, _fade)
#define playsound(_sfx)             SCRIPT_EVCMD(Script_playsound, _sfx)
#define waitsfx                     SCRIPT_EVCMD(Script_waitsfx)
#define warpsound                   SCRIPT_EVCMD(Script_warpsound)
#define playcry(_cry)               SCRIPT_EVCMD(Script_cry, _cry)
#define setlasttalked(_o)           SCRIPT_EVCMD(Script_setlasttalked, _o)
#define applymovement(_o, _mv)      SCRIPT_EVCMD(Script_applymovement, _o, _mv)
#define applymovementlasttalked(_m) SCRIPT_EVCMD(Script_applymovementlasttalked, _m)
#define faceplayer                  SCRIPT_EVCMD(Script_faceplayer)
#define faceobject(_e, _d)          SCRIPT_EVCMD(Script_faceobject, _e, _d)
#define turnobject(_e, _d)          SCRIPT_EVCMD(Script_turnobject, _e, _d)
#define variablesprite(_i, _s)      SCRIPT_EVCMD(Script_variablesprite, (_i) - SPRITE_VARS, _s)
#define appear(_o)                  SCRIPT_EVCMD(Script_appear, _o)
#define disappear(_o)               SCRIPT_EVCMD(Script_disappear, _o)
#define follow(_l, _f)              SCRIPT_EVCMD(Script_follow, _l, _f)
#define stopfollow                  SCRIPT_EVCMD(Script_stopfollow)
#define moveobject(_o, _x, _y)      SCRIPT_EVCMD(Script_moveobject, _o, _x, _y)
#define writeobjectxy(_o)           SCRIPT_EVCMD(Script_writeobjectxy, _o)
#define follownotexact(_b, _c)      SCRIPT_EVCMD(Script_follownotexact, _b, _c)
#define loademote(_e)               SCRIPT_EVCMD(Script_loademote, _e)
#define showemote(_e, _o, _f)       SCRIPT_EVCMD(Script_showemote, _e, _o, _f)
#define earthquake(_m)              SCRIPT_EVCMD(Script_earthquake, _m)
#define randomwildmon               SCRIPT_EVCMD(Script_randomwildmon)
#define loadtemptrainer             SCRIPT_EVCMD(Script_loadtemptrainer)
#define loadwildmon(_sp, _lvl)      SCRIPT_EVCMD(Script_loadwildmon, _sp, _lvl)
#define loadtrainer(_cl, _id)       SCRIPT_EVCMD(Script_loadtrainer, _cl, _id)
#define startbattle                 SCRIPT_EVCMD(Script_startbattle)
#define catchtutorial(_type)        SCRIPT_EVCMD(Script_catchtutorial, _type)
#define reloadmapafterbattle        SCRIPT_EVCMD(Script_reloadmapafterbattle)
#define reloadmap                   SCRIPT_EVCMD(Script_reloadmap)
#define scall(_f)                   SCRIPT_CALL(_f)
#define scall_far(_f, _p)           SCRIPT_CALLGOTO(_f, _p)
#define scall_local(_s)             SCRIPT_CALLLOCAL(_s)
#define memcall(_f)                 SCRIPT_CALL(_f)
#define sjump(_f)                   SCRIPT_GOTOPOS(_f, 0)
#define sjump_far(_f, _p)           SCRIPT_GOTOPOS(_f, _p)
#define iftrue_jump(_s)             SCRIPT_IFTRUE(_s)
#define iffalse_jump(_s)            SCRIPT_IFFALSE(_s)
#define ifequal_jump(_v, _s)        SCRIPT_IFEQUAL(_v, _s)
#define ifnotequal_jump(_v, _s)     SCRIPT_IFNEQUAL(_v, _s)
#define ifless_jump(_v, _s)         SCRIPT_IFLESS(_v, _s)
#define ifgreater_jump(_v, _s)      SCRIPT_IFGREATER(_v, _s)
#define iftrue(_s)                  if(wram->wScriptVar) goto _s;
#define iffalse(_s)                 if(!wram->wScriptVar) goto _s;
#define ifequal(_v, _s)             if(wram->wScriptVar == (_v)) goto _s;
#define ifnotequal(_v, _s)          if(wram->wScriptVar != (_v)) goto _s;
#define ifless(_v, _s)              if(wram->wScriptVar < (_v)) goto _s;
#define ifgreater(_v, _s)           if(wram->wScriptVar > (_v)) goto _s;
#define jumpstd(_std)               SCRIPT_EVCMD(Script_jumpstd, stdscript_const(_std))
#define callstd(_std)               SCRIPT_EVCMD(Script_callstd, stdscript_const(_std))
#define sdefer(_f)                  SCRIPT_EVCMD(Script_sdefer, _f)
#define checkscene                  SCRIPT_EVCMD(Script_checkscene)
#define checkmapscene(_map)         SCRIPT_EVCMD(Script_checkscene, MAP_ID(_map))
#define setscene(_sc)               SCRIPT_EVCMD(Script_setscene, _sc)
#define setmapscene(_map, _sc)      SCRIPT_EVCMD(Script_setmapscene, MAP_ID(_map), _sc)
#define readmem(_ptr)               SCRIPT_EVCMD(Script_readmem, _ptr)
#define writemem(_ptr)              SCRIPT_EVCMD(Script_writemem, _ptr)
#define loadmem(_ptr, _value)       SCRIPT_EVCMD(Script_loadmem, _ptr, _value)
#define setval(_value)              SCRIPT_EVCMD(Script_setval, _value)
#define addval(_value)              SCRIPT_EVCMD(Script_addval, _value)
#define srandom(_value)             SCRIPT_EVCMD(Script_random, _value)
#define readvar(_var)               SCRIPT_EVCMD(Script_readvar, _var)
#define writevar(_var)              SCRIPT_EVCMD(Script_writevar, _var)
#define loadvar(_var, _value)       SCRIPT_EVCMD(Script_loadvar, _var, _value)
#define getmonname(_b, _mon)        SCRIPT_EVCMD(Script_getmonname, _b, _mon)
#define getitemname(_b, _item)      SCRIPT_EVCMD(Script_getitemname, _item, _b)
#define getcurlandmarkname(b)       SCRIPT_EVCMD(Script_getcurlandmarkname, b)
#define getlandmarkname(_a, _b)     SCRIPT_EVCMD(Script_getlandmarkname, _a, _b)
#define gettrainername(b,c,a)       SCRIPT_EVCMD(Script_gettrainername, b, c, a)
#define gettrainerclassname(b,c)    SCRIPT_EVCMD(Script_gettrainerclassname, b, c)
#define getmoney(_b, _act)          SCRIPT_EVCMD(Script_getmoney, _b, _act)
#define getcoins(_num)              SCRIPT_EVCMD(Script_getcouns, _num)
#define getnum(_num)                SCRIPT_EVCMD(Script_getnum, _num)
#define getstring(_b, _str)         SCRIPT_EVCMD(Script_getstring, _b, _str)
#define givepokemail(_mail)         SCRIPT_EVCMD(Script_givepokemail, _mail)
#define checkpokemail(_str)         SCRIPT_EVCMD(Script_checkpokemail, _str)
#define giveitem(_i, _q)            SCRIPT_EVCMD(Script_giveitem, _i, _q)
#define takeitem(_i, _q)            SCRIPT_EVCMD(Script_takeitem, _i, _q)
#define checkitem(_item)            SCRIPT_EVCMD(Script_checkitem, _item)
#define givemoney(_act, _amt)       SCRIPT_EVCMD(Script_givemoney, _act, _amt)
#define takemoney(_act, _amt)       SCRIPT_EVCMD(Script_takemoney, _act, _amt)
#define checkmoney(_act, _amt)      SCRIPT_EVCMD(Script_checkmoney, _act, _amt)
#define givecoins(_amt)             SCRIPT_EVCMD(Script_givecoins, _amt)
#define takecoins(_amt)             SCRIPT_EVCMD(Script_takecoins, _amt)
#define checkcoins(_amt)            SCRIPT_EVCMD(Script_checkcoins, _amt)
#define checktime(_time)            SCRIPT_EVCMD(Script_checktime, _time)
#define checkpoke(_s)               SCRIPT_EVCMD(Script_checkpoke, _s)
#define addcellnum(_c)              SCRIPT_EVCMD(Script_addcellnum, _c)
#define delcellnum(_c)              SCRIPT_EVCMD(Script_delcellnum, _c)
#define checkcellnum(_c)            SCRIPT_EVCMD(Script_checkcellnum, _c)
#define specialphonecall(_id)       SCRIPT_EVCMD(Script_specialphonecall, _id)
#define checkphonecall              SCRIPT_EVCMD(Script_checkphonecall)
#define givepokeext(_s,_l,_i,_n,_o) SCRIPT_EVCMD(Script_givepoke, _s, _l, _i, true, _n, _o)
#define givepoke(_s,_l,_i)          SCRIPT_EVCMD(Script_givepokesimple, _s, _l, _i)
#define giveegg(_species, _lvl)     SCRIPT_EVCMD(Script_giveegg, _species, _lvl)
#define setevent(_flag)             SCRIPT_EVCMD(Script_setevent, _flag)
#define clearevent(_flag)           SCRIPT_EVCMD(Script_clearevent, _flag)
#define checkevent(_flag)           SCRIPT_EVCMD(Script_checkevent, _flag)
#define setflag(_flag)              SCRIPT_EVCMD(Script_setflag, _flag)
#define clearflag(_flag)            SCRIPT_EVCMD(Script_clearflag, _flag)
#define checkflag(_flag)            SCRIPT_EVCMD(Script_checkflag, _flag)
#define warpfacing(_d, _m, _x, _y)  SCRIPT_EVCMD(Script_warpfacing, _d, MAP_ID(_m), _x, _y)
#define warp(_m, _x, _y)            SCRIPT_EVCMD(Script_warp, MAP_ID(_m), _x, _y)
#define warpmod(_w, _m)             SCRIPT_EVCMD(Script_warpmod, _w, MAP_ID(_m))
#define blackoutmod(_m)             SCRIPT_EVCMD(Script_blackoutmod, MAP_ID(_m))
#define dontrestartmapmusic         SCRIPT_EVCMD(Script_dontrestartmapmusic)
#define writecmdqueue(_cmd)         SCRIPT_EVCMD(Script_writecmdqueue, _cmd)
#define delcmdqueue(_b)             SCRIPT_EVCMD(Script_delcmdqueue, _b)
#define changeblock(_x, _y, _b)     SCRIPT_EVCMD(Script_changeblock, _x, _y, _b)
#define reloadmappart               SCRIPT_EVCMD(Script_reloadmappart)
#define warpcheck                   SCRIPT_EVCMD(Script_warpcheck)
#define newloadmap(_m)              SCRIPT_EVCMD(Script_newloadmap, _m)
#define reloadend(_m)               SCRIPT_EVCMD(Script_reloadend, _m)
#define opentext                    SCRIPT_EVCMD(Script_opentext)
#define refreshscreen               SCRIPT_EVCMD(Script_refreshscreen)
#define closetext                   SCRIPT_EVCMD(Script_closetext)
#define autoinput(_hl)              SCRIPT_EVCMD(Script_autoinput, _hl)
#define pause(_a)                   SCRIPT_EVCMD(Script_pause, _a)
#define deactivatefacing(_d)        SCRIPT_EVCMD(Script_deactivatefacing, _d)
#define s_end                       SCRIPT_END2
#define s_endcallback               SCRIPT_ENDCALLBACK
#define s_endall                    SCRIPT_EVCMD(Script_endall)
#define halloffame                  SCRIPT_EVCMD(Script_halloffame)
#define credits                     SCRIPT_EVCMD(Script_credits)
#define wait(_n)                    SCRIPT_EVCMD(Script_wait, _n)
#define checksave                   SCRIPT_EVCMD(Script_checksave)
#define s_ret                       SCRIPT_RET

#define jumpstd2(_std)              SCRIPT_EVCMD(Script_jumpstd, _std)

#define battletoweraction(_action)  s->position = SCRIPT_MAX_FARLABELS + __LINE__; Script_setval(s, _action); Script_special(s, SP_BattleTowerAction); return false; case SCRIPT_MAX_FARLABELS + __LINE__:

#define far_label(_name)            case _name: